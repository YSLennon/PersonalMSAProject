server:
  port: 8080
spring:
  application:
    name: api-gateway
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  cloud:
    gateway:
      routes:
        - id: auth-service   # ✅ 해당 라우트의 ID (고유한 식별자)
          uri: lb://auth-service  # ✅ auth-service로 Load Balancer를 이용해 요청 전달
          predicates: # ✅ 요청을 전달할 조건 (프레디케이트)
            - Path=/auth/**  # 👉 /auth/** 로 시작하는 요청을 auth-service로 보냄
          filters:
            - StripPrefix=1  # 👉 요청 경로에서 첫 번째 경로(auth)를 제거하고 보냄

        - id: board-service
          uri: lb://board-service
          predicates:
            - Path=/board/**  # 👉 /board/** 요청을 board-service로 보냄

        - id: shop-service
          uri: lb://shop-service
          predicates:
            - Path=/shop/**  # 👉 /shop/** 요청을 shop-service로 보냄
client:
  url: http://localhost:5173
redis:
  host: ${REDIS_HOST:localhost}
  port: 6379

---

spring:
  config:
    activate:
      on-profile: dev
  security:
    cookie:
      secure: false
  jwt:
    secret: asjkfajsklfhaskldfhklasdklqwhkleqwklej
  jpa:
    hibernate:
      ddl-auto: update
      show-sql: true
      open-in-view: true
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb
    username: sa
    password:
    initialize: true
  devtools:
    restart:
      enabled: true
  h2:
    console:
      enable: true
      path: /h2-console

---

spring:
  config:
    activate:
      on-profile: prod
  security:
    cookie:
      secure: true
  jwt:
    secret: ${JWT_SECRET_KEY}
  jpa:
    hibernate:
      ddl-auto: validate
      show-sql: false
      open-in-view: false
  datasource:
    driver-class-name: ${DB_DRVIER_NAME}
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}